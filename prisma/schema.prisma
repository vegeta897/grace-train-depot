generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["windows", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @unique
  auth_session      Session[]
  auth_key          Key[]
  createdAt         DateTime        @default(now())
  twitchUserId      String          @unique
  twitchUsername    String          @unique
  twitchDisplayName String          @unique
  trusted           Boolean         @default(false)
  cars              Car[]
  graceTrainCars    GraceTrainCar[]

  @@index([id], type: Hash)
  @@map("auth_user")
}

model Session {
  id             String @id @unique
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)
  user_id        String
  active_expires BigInt
  idle_expires   BigInt

  @@index([user_id])
  @@map("auth_session")
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)
  user_id         String

  @@index([user_id])
  @@map("auth_key")
}

model Car {
  id                 Int                 @id @default(autoincrement())
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  shortId            String              @unique @db.VarChar(8)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  revision           Int                 @default(1)
  name               String?
  published          Boolean             @default(false)
  approval           Approval            @default(pending)
  body               String              @default("boxy")
  bodyColor          String?
  bodyPopColor       String?
  wheelColor         String?
  wheelFromCenter    Float
  wheelSize          Int                 @default(25)
  decals             Decal[]
  toppers            Topper[]
  graceTrainCars     GraceTrainCar[]
  graceTrainCarStats GraceTrainCarStats?
}

model Decal {
  car    Car    @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId  Int
  name   String
  slot   Int
  fill   String
  x      Float
  y      Float
  scale  Float
  rotate Float
  params Json   @default("{}")

  @@id([carId, slot])
}

model Topper {
  car      Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId    Int
  name     String
  slot     Int
  colors   String[]
  position Float
  offset   Float    @default(0)
  scale    Float    @default(1)
  rotate   Float    @default(0)

  @@id([carId, slot])
}

enum Approval {
  pending
  approved
  rejected
}

model GraceTrain {
  id    BigInt          @id @unique
  cars  GraceTrainCar[]
  ended Boolean         @default(false)
  score Float
}

model GraceTrainCar {
  train        GraceTrain @relation(fields: [trainId], references: [id], onDelete: Cascade)
  trainId      BigInt
  index        Int
  car          Car?       @relation(fields: [carId], references: [id])
  carId        Int?
  carRevision  Int?
  approval     Approval?
  user         User?      @relation(fields: [userId], references: [id])
  userId       String?
  twitchUserId String
  addedAt      DateTime   @default(now())
  carData      Json

  @@id([trainId, index])
}

model GraceTrainCarStats {
  car              Car    @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId            Int    @unique
  graceTrainCount  Int    @default(0)
  totalAppearances Int    @default(0)
  lastGraceTrainId BigInt @default(0)
}
