generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["windows", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @unique
  auth_session      Session[]
  auth_key          Key[]
  createdAt         DateTime  @default(now())
  twitchUserId      String    @unique
  twitchUsername    String    @unique
  twitchDisplayName String    @unique
  cars              Car[]

  @@index([id], type: Hash)
  @@map("auth_user")
}

model Session {
  id             String @id @unique
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)
  user_id        String
  active_expires BigInt
  idle_expires   BigInt

  @@index([user_id])
  @@map("auth_session")
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)
  user_id         String

  @@index([user_id])
  @@map("auth_key")
}

model Car {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  shortId         String   @unique @db.VarChar(8)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  name            String?
  body            Body     @default(boxy)
  wheelColor      String
  wheelFromCenter Float
  hatColor        String?
  decals          Decal[]
}

model Decal {
  id     Int    @id @default(autoincrement())
  car    Car    @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId  Int
  name   String
  slot   Int
  fill   String
  x      Float
  y      Float
  scale  Float
  rotate Float

  @@index([carId, slot])
}

/// Unnecessary?
enum Body {
  boxy
  tanky
}
